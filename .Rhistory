NFL_injuries$Position <- as.factor(NFL_injuries$Position)
NFL_injuries$Week_of_Injury <- as.factor(NFL_injuries$Week_of_Injury) # If it's categorical
NFL_injuries$Team <- as.factor(NFL_injuries$Team)
NFL_injuries$Divisional_Game <- as.factor(NFL_injuries$Divisional_Game) # If it's categorical
# Continue for other categorical variables
model <- lm(Reported_Injury_Type ~ Place + Opposing_Team + Position + Week_of_Injury + Team + Divisional_Game + Average_Playtime_Before_Injury, data = NFL_injuries)
View(nba_data_weighted)
ggplot(data = filter(nba_data_weighted, year == 2007),
aes(x = Composite_Score_Weighted,
y = fct_reorder(Player, lifeExp))) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Player, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted),
ggplot(data = nba_data_weighted),
ggplot(data = nba_data_weighted)
aes(x = Composite_Score_Weighted,
y = fct_reorder(Player, lifeExp)) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Player, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted)
aes(x = Composite_Score_Weighted,
y = Player) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Player, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = Player) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Player, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = Player)) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Player, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = Player)) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = reorder(Player, -Composite_Score_Weighted)) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = reorder(Player, -Composite_Score_Weighted))) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = reorder(Player, +Composite_Score_Weighted))) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
#| include: false
library(tidyverse)
library(socviz)
library(lubridate)
library(knitr)
library(kableExtra)
library(ggthemes)
library(ggthemr)
library(ggthemes)
library(ggrepel)
library(hrbrthemes)
library(hexbin)
library(ggforce)
library(RColorBrewer)
library(ggplot2)
knitr::opts_chunk$set(fig.width=8, fig.height=5,
echo = T, eval = T,
message=F, warning = F, fig.cap = " ")
theme_set(theme_classic() +
theme(strip.background =element_rect(fill="lightgray"),
axis.title.x = element_text(size=rel(1)),
axis.title.y = element_text(size=rel(1)),
))
# Load the dataset
library(readxl)
nba_data <- read_excel("C:/Users/nicka/OneDrive/Desktop/Fall 2023/Data 399/NBA_Goat.xlsx")
View(nba_data)
#With no weights
library(dplyr)
# Assume 'nba_data' is your dataframe name
# Standardize the columns of interest (mean=0, std=1)
nba_data_standardized <- nba_data %>%
mutate_at(vars(Offensive_rating_playoffs,
Offensive_win_shares_playoffs_per_season,
VORP_playoffs_per_season,
Defensive_win_shares_playoffs_per_season,
Win_shares_per_48_playoffs,
Box_plus_minus_playoffs,
PER_playoffs,
Number_of_Championships), scale)
# Sum the standardized scores to get a composite score for each player
nba_data$Composite_Score <- rowSums(nba_data_standardized[,c('Offensive_rating_playoffs',
'Offensive_win_shares_playoffs_per_season',
'VORP_playoffs_per_season',
'Defensive_win_shares_playoffs_per_season',
'Win_shares_per_48_playoffs',
'Box_plus_minus_playoffs',
'PER_playoffs',
'Number_of_Championships')])
# Rank the players within each position based on their composite score
position_rankings <- nba_data %>%
arrange(Position, desc(Composite_Score)) %>%
group_by(Position) %>%
mutate(Rank = row_number()) %>%
ungroup() %>%
select(Position, Player, Composite_Score, Rank)
# View the rankings for each position
print(position_rankings)
#Ranking with weighted variables
library(dplyr)
# Define the weights for the respective metrics
weights <- c(PER_playoffs = 7,
Offensive_win_shares_playoffs_per_season = 8,
Offensive_rating_playoffs = 10,
VORP_playoffs_per_season = 11,
Box_plus_minus_playoffs = 12,
Number_of_Championships = 14,
Win_shares_per_48_playoffs = 13,
Defensive_win_shares_playoffs_per_season = 8)
# Apply the weights to the respective columns and create new weighted columns
nba_data_weighted <- nba_data %>%
mutate(across(all_of(names(weights)), ~ . * weights[deparse(substitute(.))], .names = "{.col}_weighted"))
# Standardize the weighted columns (mean=0, std=1)
nba_data_standardized <- as.data.frame(scale(nba_data_weighted[,paste0(names(weights), "_weighted")]))
# Sum the standardized scores to get a composite score for each player
nba_data_weighted$Composite_Score_Weighted <- rowSums(nba_data_standardized)
# Rank the players within each position based on their new composite score
position_rankings_weighted <- nba_data_weighted %>%
arrange(Position, desc(Composite_Score_Weighted)) %>%
group_by(Position) %>%
mutate(Rank = row_number()) %>%
ungroup() %>%
select(Position, Player, Composite_Score_Weighted, Rank)
# View the top-ranked players for each position
top_ranked_per_position <- position_rankings_weighted %>%
filter(Rank == 1) %>%
select(Position, Player, Composite_Score_Weighted)
print(top_ranked_per_position)
#Ranking with weighted variables
library(dplyr)
# Define the weights for the respective metrics
weights <- c(PER_playoffs = 7,
Offensive_win_shares_playoffs_per_season = 8,
Offensive_rating_playoffs = 10,
VORP_playoffs_per_season = 11,
Box_plus_minus_playoffs = 12,
Number_of_Championships = 14,
Win_shares_per_48_playoffs = 13,
Defensive_win_shares_playoffs_per_season = 8)
# Apply the weights to the respective columns and create new weighted columns
nba_data_weighted <- nba_data %>%
mutate(across(all_of(names(weights)), ~ . * weights[deparse(substitute(.))], .names = "{.col}_weighted"))
# Standardize the weighted columns (mean=0, std=1)
nba_data_stand <- as.data.frame(scale(nba_data_weighted[,paste0(names(weights), "_weighted")]))
# Sum the standardized scores to get a composite score for each player
nba_data_weighted$Composite_Score_Weighted <- rowSums(nba_data_stand)
# Rank the players within each position based on their new composite score
position_rankings_weighted <- nba_data_weighted %>%
arrange(Position, desc(Composite_Score_Weighted)) %>%
group_by(Position) %>%
mutate(Rank = row_number()) %>%
ungroup() %>%
select(Position, Player, Composite_Score_Weighted, Rank)
# View the top-ranked players for each position
top_ranked_per_position <- position_rankings_weighted %>%
filter(Rank == 1) %>%
select(Position, Player, Composite_Score_Weighted)
print(top_ranked_per_position)
#Ranking with weighted variables
library(dplyr)
# Define the weights for the respective metrics
weights <- c(PER_playoffs = 7,
Offensive_win_shares_playoffs_per_season = 8,
Offensive_rating_playoffs = 10,
VORP_playoffs_per_season = 11,
Box_plus_minus_playoffs = 12,
Number_of_Championships = 14,
Win_shares_per_48_playoffs = 13,
Defensive_win_shares_playoffs_per_season = 8)
# Apply the weights to the respective columns and create new weighted columns
nba_data_weighted <- nba_data %>%
mutate(across(all_of(names(weights)), ~ . * weights[deparse(substitute(.))], .names = "{.col}_weighted"))
# Standardize the weighted columns (mean=0, std=1)
nba_data_stand <- as.data.frame(scale(nba_data_weighted[,paste0(names(weights), "_weighted")]))
# Sum the standardized scores to get a composite score for each player
nba_data_weighted$Composite_Score_Weighted <- rowSums(nba_data_stand)
#Ranking with weighted variables
library(dplyr)
# Define the weights for the respective metrics
weights <- c(PER_playoffs = 7,
Offensive_win_shares_playoffs_per_season = 8,
Offensive_rating_playoffs = 10,
VORP_playoffs_per_season = 11,
Box_plus_minus_playoffs = 12,
Number_of_Championships = 14,
Win_shares_per_48_playoffs = 13,
Defensive_win_shares_playoffs_per_season = 8)
# Apply the weights to the respective columns and create new weighted columns
nba_data_weighted <- nba_data %>%
mutate(across(all_of(names(weights)), ~ . * weights[deparse(substitute(.))], .names = "{.col}_weighted"))
# Rank the players within each position based on their new composite score
position_rankings_weighted <- nba_data_weighted %>%
arrange(Position, desc(Composite_Score_Weighted)) %>%
group_by(Position) %>%
mutate(Rank = row_number()) %>%
ungroup() %>%
select(Position, Player, Composite_Score_Weighted, Rank)
# Standardize the weighted columns (mean=0, std=1)
nba_data_stand <- as.data.frame(scale(nba_data_weighted[,paste0(names(weights), "_weighted")]))
# Sum the standardized scores to get a composite score for each player
nba_data_weighted$Composite_Score_Weighted <- rowSums(nba_data_stand)
# Rank the players within each position based on their new composite score
position_rankings_weighted <- nba_data_weighted %>%
arrange(Position, desc(Composite_Score_Weighted)) %>%
group_by(Position) %>%
mutate(Rank = row_number()) %>%
ungroup() %>%
select(Position, Player, Composite_Score_Weighted, Rank)
# View the top-ranked players for each position
top_ranked_per_position <- position_rankings_weighted %>%
filter(Rank == 1) %>%
select(Position, Player, Composite_Score_Weighted)
print(top_ranked_per_position)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = reorder(Player, +Composite_Score_Weighted))) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
#With no weights
library(dplyr)
# Assume 'nba_data' is your dataframe name
# Standardize the columns of interest (mean=0, std=1)
nba_data_standardized <- nba_data %>%
mutate_at(vars(Offensive_rating_playoffs,
Offensive_win_shares_playoffs_per_season,
VORP_playoffs_per_season,
Defensive_win_shares_playoffs_per_season,
Win_shares_per_48_playoffs,
Box_plus_minus_playoffs,
PER_playoffs,
Number_of_Championships), scale)
# Sum the standardized scores to get a composite score for each player
nba_data$Composite_Score <- rowSums(nba_data_standardized[,c('Offensive_rating_playoffs',
'Offensive_win_shares_playoffs_per_season',
'VORP_playoffs_per_season',
'Defensive_win_shares_playoffs_per_season',
'Win_shares_per_48_playoffs',
'Box_plus_minus_playoffs',
'PER_playoffs',
'Number_of_Championships')])
# Rank the players within each position based on their composite score
position_rankings <- nba_data %>%
arrange(Position, desc(Composite_Score)) %>%
group_by(Position) %>%
mutate(Rank = row_number()) %>%
ungroup() %>%
select(Position, Player, Composite_Score, Rank)
# View the rankings for each position
print(position_rankings)
View(nba_data_standardized)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = reorder(Player, +Composite_Score_Weighted))) +
geom_point(color = "#0072B2", size = 1.75, fill = Composite_Score_Weighted) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
ggplot(data = nba_data_weighted,
aes(x = Composite_Score_Weighted,
y = reorder(Player, +Composite_Score_Weighted),
fill = Composite_Score_Weighted)) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = Composite_Score_Weighted), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(35, 90)
) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')
)
View(nba_data_weighted)
install.packages("scale")
# Load the dataset
library(readxl)
nba_data <- read_excel("C:/Users/nicka/OneDrive/Desktop/Fall 2023/Data 399/NBA_Goat.xlsx")
View(nba_data)
#| include: false
library(tidyverse)
library(socviz)
library(lubridate)
library(knitr)
library(kableExtra)
library(ggthemes)
library(ggthemr)
library(ggthemes)
library(ggrepel)
library(hrbrthemes)
library(hexbin)
library(ggforce)
library(RColorBrewer)
library(ggplot2)
knitr::opts_chunk$set(fig.width=8, fig.height=5,
echo = T, eval = T,
message=F, warning = F, fig.cap = " ")
theme_set(theme_classic() +
theme(strip.background =element_rect(fill="lightgray"),
axis.title.x = element_text(size=rel(1)),
axis.title.y = element_text(size=rel(1)),
))
# Load the dataset
library(readxl)
nba_data <- read_excel("C:/Users/nicka/OneDrive/Desktop/Fall 2023/Data 399/NBA_Goat.xlsx")
# View(nba_data)
